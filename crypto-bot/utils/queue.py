import asyncio
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from datetime import datetime
from collections import defaultdict, deque
import heapq
import logging
from enum import Enum

from config.settings import config
from utils.rate_limiter import telegram_limiter

logger = logging.getLogger(__name__)


class Priority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    LOW = 3
    NORMAL = 2
    HIGH = 1
    URGENT = 0


@dataclass(order=True)
class Message:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    priority: int = field(compare=True)
    timestamp: datetime = field(compare=False)
    user_id: int = field(compare=False)
    content: str = field(compare=False)
    reply_markup: Optional[Any] = field(default=None, compare=False)
    parse_mode: str = field(default="HTML", compare=False)
    
    def __post_init__(self):
        if isinstance(self.priority, Priority):
            self.priority = self.priority.value


@dataclass
class AlertBatch:
    """–ë–∞—Ç—á –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    user_id: int
    alerts: List[Dict[str, Any]]
    priority: Priority = Priority.NORMAL
    timestamp: datetime = field(default_factory=datetime.now)


class MessageQueue:
    """–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –±–∞—Ç—á–∏–Ω–≥–æ–º"""
    
    def __init__(self, bot_instance=None):
        self.bot = bot_instance
        self.user_queues: Dict[int, List[Message]] = defaultdict(list)
        self.alert_batches: Dict[int, List[Dict[str, Any]]] = defaultdict(list)
        self.processing = False
        self._lock = asyncio.Lock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_sent': 0,
            'batches_sent': 0,
            'errors': 0,
            'queue_size': 0
        }
    
    def set_bot(self, bot_instance):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –±–æ—Ç–∞"""
        self.bot = bot_instance
    
    async def add_message(self, user_id: int, content: str, 
                         priority: Priority = Priority.NORMAL,
                         reply_markup: Optional[Any] = None,
                         parse_mode: str = "HTML") -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        async with self._lock:
            message = Message(
                priority=priority,
                timestamp=datetime.now(),
                user_id=user_id,
                content=content,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            heapq.heappush(self.user_queues[user_id], message)
            self.stats['queue_size'] += 1
    
    async def add_alert(self, user_id: int, alert: Dict[str, Any],
                       priority: Priority = Priority.NORMAL) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞"""
        async with self._lock:
            self.alert_batches[user_id].append(alert)
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –±–∞—Ç—á–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if len(self.alert_batches[user_id]) >= config.MAX_ALERTS_PER_MESSAGE:
                await self._flush_user_alerts(user_id, priority)
    
    async def add_alerts_bulk(self, alerts: List[Tuple[int, Dict[str, Any]]],
                             priority: Priority = Priority.NORMAL) -> None:
        """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤"""
        async with self._lock:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_alerts = defaultdict(list)
            for user_id, alert in alerts:
                user_alerts[user_id].append(alert)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á–∏
            for user_id, user_alert_list in user_alerts.items():
                self.alert_batches[user_id].extend(user_alert_list)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –±–∞—Ç—á–∏
                while len(self.alert_batches[user_id]) >= config.MAX_ALERTS_PER_MESSAGE:
                    await self._flush_user_alerts(user_id, priority)
    
    async def _flush_user_alerts(self, user_id: int, priority: Priority) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not self.alert_batches[user_id]:
            return
        
        # –ë–µ—Ä–µ–º –¥–æ MAX_ALERTS_PER_MESSAGE –∞–ª–µ—Ä—Ç–æ–≤
        alerts_to_send = self.alert_batches[user_id][:config.MAX_ALERTS_PER_MESSAGE]
        self.alert_batches[user_id] = self.alert_batches[user_id][config.MAX_ALERTS_PER_MESSAGE:]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        content = self._format_alerts(alerts_to_send)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
        await self.add_message(user_id, content, priority)
    
    def _format_alerts(self, alerts: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        lines = ["üîî <b>–°–≤–µ—á–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:</b>\n"]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        by_interval = defaultdict(list)
        for alert in alerts:
            by_interval[alert['interval']].append(alert)
        
        for interval, interval_alerts in sorted(by_interval.items()):
            lines.append(f"\n<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª {interval}:</b>")
            for alert in interval_alerts[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª
                symbol = alert['symbol']
                change = alert['percent_change']
                direction = "üìà" if change > 0 else "üìâ"
                lines.append(
                    f"{direction} {symbol}: {change:+.2f}%"
                )
        
        # –ï—Å–ª–∏ –∞–ª–µ—Ä—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        total_alerts = sum(len(alerts) for alerts in by_interval.values())
        if total_alerts > 30:
            lines.append(f"\n<i>...–∏ –µ—â–µ {total_alerts - 30} –∞–ª–µ—Ä—Ç–æ–≤</i>")
        
        return "\n".join(lines)
    
    async def flush_all_alerts(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        async with self._lock:
            user_ids = list(self.alert_batches.keys())
            for user_id in user_ids:
                if self.alert_batches[user_id]:
                    await self._flush_user_alerts(user_id, Priority.NORMAL)
    
    async def start_processing(self) -> None:
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
        if self.processing:
            return
        
        self.processing = True
        asyncio.create_task(self._process_loop())
        logger.info("Message queue processing started")
    
    async def stop_processing(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.processing = False
        await self.flush_all_alerts()
        logger.info("Message queue processing stopped")
    
    async def _process_loop(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while self.processing:
            try:
                await self._process_batch()
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            except Exception as e:
                logger.error(f"Error in message processing loop: {e}")
                await asyncio.sleep(1)
    
    async def _process_batch(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.bot:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages_to_send = await self._get_priority_messages(10)
        
        for message in messages_to_send:
            try:
                # Rate limiting
                await telegram_limiter.acquire_for_user(message.user_id)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞
                await self.bot.send_message(
                    chat_id=message.user_id,
                    text=message.content,
                    reply_markup=message.reply_markup,
                    parse_mode=message.parse_mode
                )
                
                self.stats['messages_sent'] += 1
                
            except Exception as e:
                logger.error(f"Error sending message to {message.user_id}: {e}")
                self.stats['errors'] += 1
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                if "bot was blocked" not in str(e).lower():
                    await self.add_message(
                        message.user_id,
                        message.content,
                        Priority(message.priority),
                        message.reply_markup,
                        message.parse_mode
                    )
    
    async def _get_priority_messages(self, limit: int) -> List[Message]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        async with self._lock:
            all_messages = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id, queue in self.user_queues.items():
                if queue:
                    all_messages.extend(queue)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            all_messages.sort(key=lambda m: (m.priority, m.timestamp))
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ limit —Å–æ–æ–±—â–µ–Ω–∏–π
            messages_to_send = all_messages[:limit]
            
            # –£–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ –æ—á–µ—Ä–µ–¥–µ–π
            for message in messages_to_send:
                self.user_queues[message.user_id].remove(message)
                if not self.user_queues[message.user_id]:
                    del self.user_queues[message.user_id]
            
            self.stats['queue_size'] -= len(messages_to_send)
            
            return messages_to_send
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
        return {
            **self.stats,
            'users_in_queue': len(self.user_queues),
            'pending_alerts': sum(len(alerts) for alerts in self.alert_batches.values()),
            'total_pending': self.stats['queue_size'] + sum(len(alerts) for alerts in self.alert_batches.values())
        }
    
    async def get_user_queue_size(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self._lock:
            return len(self.user_queues.get(user_id, [])) + len(self.alert_batches.get(user_id, []))


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å
message_queue = MessageQueue()