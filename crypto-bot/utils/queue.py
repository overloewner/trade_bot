import asyncio
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from collections import defaultdict, deque
import logging
from enum import Enum

from config.settings import config

logger = logging.getLogger(__name__)


class Priority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    LOW = 3
    NORMAL = 2
    HIGH = 1
    URGENT = 0


@dataclass
class Message:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    priority: int
    timestamp: datetime
    user_id: int
    content: str
    reply_markup: Optional[Any] = None
    parse_mode: str = "HTML"
    
    def __post_init__(self):
        if isinstance(self.priority, Priority):
            self.priority = self.priority.value


class MessageQueue:
    """–û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É"""
    
    def __init__(self, bot_instance=None):
        self.bot = bot_instance
        
        # –û—á–µ—Ä–µ–¥—å –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: user_id -> [alert_strings]
        self.alert_batches: Dict[int, List[str]] = defaultdict(list)
        
        # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: [Message]
        self.message_queue: List[Message] = []
        
        self.processing = False
        self._lock = asyncio.Lock()
        
        # Rate limiting: 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
        self._send_times = deque(maxlen=config.QUEUE_MAX_MESSAGES_PER_MINUTE)  # –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 30 –æ—Ç–ø—Ä–∞–≤–æ–∫
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self._scheduler_task = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_sent': 0,
            'alerts_sent': 0,
            'errors': 0,
            'rate_limited': 0
        }
    
    def set_bot(self, bot_instance):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –±–æ—Ç–∞"""
        self.bot = bot_instance
    
    async def add_message(self, user_id: int, content: str, 
                         priority: Priority = Priority.NORMAL,
                         reply_markup: Optional[Any] = None,
                         parse_mode: str = "HTML") -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        async with self._lock:
            message = Message(
                priority=priority,
                timestamp=datetime.now(),
                user_id=user_id,
                content=content,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            self.message_queue.append(message)
            
        logger.info(f"Added regular message for user {user_id}")
    
    async def add_alerts_bulk(self, alerts: List[Tuple[int, Dict[str, Any]]],
                             priority: Priority = Priority.NORMAL) -> None:
        """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤"""
        logger.info(f"Adding {len(alerts)} alerts to queue")
        
        users_to_send_immediately = []
        
        async with self._lock:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_alerts = defaultdict(list)
            for user_id, alert_data in alerts:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç –≤ —Å—Ç—Ä–æ–∫—É
                alert_text = self._format_single_alert(alert_data)
                user_alerts[user_id].append(alert_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            for user_id, alert_texts in user_alerts.items():
                self.alert_batches[user_id].extend(alert_texts)
                logger.debug(f"Added {len(alert_texts)} alerts for user {user_id}, total: {len(self.alert_batches[user_id])}")
                
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ - –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                if len(self.alert_batches[user_id]) >= config.MAX_ALERTS_PER_MESSAGE:
                    users_to_send_immediately.append(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–ª–Ω—ã–º–∏ –±–∞—Ç—á–∞–º–∏
        for user_id in users_to_send_immediately:
            await self._send_user_alerts_immediately(user_id)

    def _format_single_alert(self, alert_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        direction = alert_data['direction']
        symbol = alert_data['symbol']
        interval = alert_data['interval']
        percent_change = abs(alert_data['percent_change'])
        price = alert_data['price']
        
        return f"{direction} {symbol} {interval}: {percent_change:.2f}% (${price})"
    
    def _can_send_message(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ–º –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (rate limit 30/–º–∏–Ω—É—Ç—É)"""
        now = datetime.now()
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã
        while self._send_times and (now - self._send_times[0]) > timedelta(seconds=config.QUEUE_RATE_LIMIT_WINDOW):
            self._send_times.popleft()
        
        # –ú–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–µ–Ω—å—à–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        return len(self._send_times) < config.QUEUE_MAX_MESSAGES_PER_MINUTE
    
    async def start_processing(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if self.processing:
            return
        
        self.processing = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        self._scheduler_task = asyncio.create_task(self._scheduler_loop())
        
        logger.info("Message queue scheduler started - checking every 1 second, max 30/minute")
    
    async def stop_processing(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.processing = False
        
        if self._scheduler_task:
            self._scheduler_task.cancel()
            try:
                await self._scheduler_task
            except asyncio.CancelledError:
                pass
        
        logger.info("Message queue scheduler stopped")
    
    async def _scheduler_loop(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—Å–ª–∏ –º–æ–∂–Ω–æ"""
        logger.info("Scheduler loop started - checking every 1 second")
        
        while self.processing:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                await asyncio.sleep(1.0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ–º –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (rate limit)
                if not self._can_send_message():
                    logger.debug("Rate limited - cannot send message")
                    self.stats['rate_limited'] += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                if await self._has_pending_messages():
                    await self._send_next_message()
                    
            except Exception as e:
                logger.error(f"Error in scheduler loop: {e}")
                await asyncio.sleep(1.0)
    
    async def _has_pending_messages(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        async with self._lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
            for user_alerts in self.alert_batches.values():
                if user_alerts:
                    return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self.message_queue:
                return True
                
            return False
    
    async def _send_next_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        if not self.bot:
            return
            
        message_to_send = None
        
        async with self._lock:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ–º–∞–Ω–¥—ã, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
            if self.message_queue:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                self.message_queue.sort(key=lambda m: (m.priority, m.timestamp))
                message_to_send = self.message_queue.pop(0)
                
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ê–ª–µ—Ä—Ç—ã (–µ—Å–ª–∏ –Ω–µ—Ç –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
            elif self.alert_batches:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–ª–µ—Ä—Ç–∞–º–∏
                user_id = next(iter(self.alert_batches.keys()))
                user_alerts = self.alert_batches[user_id]
                
                if user_alerts:
                    # –ë–µ—Ä–µ–º –¥–æ MAX_ALERTS_PER_MESSAGE –∞–ª–µ—Ä—Ç–æ–≤
                    alerts_to_send = user_alerts[:config.MAX_ALERTS_PER_MESSAGE]
                    self.alert_batches[user_id] = user_alerts[config.MAX_ALERTS_PER_MESSAGE:]
                    
                    # –ï—Å–ª–∏ –∞–ª–µ—Ä—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if not self.alert_batches[user_id]:
                        del self.alert_batches[user_id]
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    content = "üö® <b>–ê–ª–µ—Ä—Ç—ã:</b>\n" + "\n".join(alerts_to_send)
                    
                    message_to_send = Message(
                        priority=Priority.HIGH.value,
                        timestamp=datetime.now(),
                        user_id=user_id,
                        content=content,
                        parse_mode="HTML"
                    )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message_to_send:
            try:
                logger.info(f"Sending message to user {message_to_send.user_id}")
                
                await self.bot.send_message(
                    chat_id=message_to_send.user_id,
                    text=message_to_send.content,
                    reply_markup=message_to_send.reply_markup,
                    parse_mode=message_to_send.parse_mode
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è rate limiting
                self._send_times.append(datetime.now())
                
                self.stats['messages_sent'] += 1
                logger.info(f"Message sent successfully to user {message_to_send.user_id}")
                
            except Exception as e:
                logger.error(f"Error sending message to {message_to_send.user_id}: {e}")
                self.stats['errors'] += 1
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
                if "bot was blocked" not in str(e).lower():
                    async with self._lock:
                        self.message_queue.insert(0, message_to_send)
    
    async def flush_all_alerts(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ (–ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ)"""
        logger.info("Flushing all remaining alerts...")
        
        while await self._has_pending_messages():
            if self._can_send_message():
                await self._send_next_message()
                await asyncio.sleep(1.0)  # –°–æ–±–ª—é–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            else:
                break  # –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
        pending_alerts = sum(len(alerts) for alerts in self.alert_batches.values())
        
        return {
            **self.stats,
            'pending_messages': len(self.message_queue),
            'pending_alerts': pending_alerts,
            'users_with_alerts': len(self.alert_batches),
            'rate_limit_remaining': 30 - len(self._send_times)
        }
    
    async def get_user_queue_size(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with self._lock:
            user_messages = len([m for m in self.message_queue if m.user_id == user_id])
            user_alerts = len(self.alert_batches.get(user_id, []))
            return user_messages + user_alerts
    
    async def add_formatted_alerts(self, user_id: int, alert_texts: List[str], 
                                  priority: Priority = Priority.HIGH) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        logger.info(f"Adding {len(alert_texts)} formatted alerts for user {user_id}")
        
        async with self._lock:
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã
            self.alert_batches[user_id].extend(alert_texts)
            logger.debug(f"Total alerts for user {user_id}: {len(self.alert_batches[user_id])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        if len(self.alert_batches[user_id]) >= config.MAX_ALERTS_PER_MESSAGE:
            await self._send_user_alerts_immediately(user_id)
    
    async def _send_user_alerts_immediately(self, user_id: int):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞"""
        if not self.bot:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        if not self._can_send_message():
            logger.debug(f"Rate limited - cannot send immediate alerts to user {user_id}")
            return
        
        async with self._lock:
            user_alerts = self.alert_batches.get(user_id, [])
            if len(user_alerts) >= config.MAX_ALERTS_PER_MESSAGE:
                # –ë–µ—Ä–µ–º –ø–æ–ª–Ω—ã–π –±–∞—Ç—á
                alerts_to_send = user_alerts[:config.MAX_ALERTS_PER_MESSAGE]
                self.alert_batches[user_id] = user_alerts[config.MAX_ALERTS_PER_MESSAGE:]
                
                # –ï—Å–ª–∏ –∞–ª–µ—Ä—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if not self.alert_batches[user_id]:
                    del self.alert_batches[user_id]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                content = "üö® <b>–ê–ª–µ—Ä—Ç—ã:</b>\n" + "\n".join(alerts_to_send)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–≤–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
        if 'alerts_to_send' in locals():
            try:
                logger.info(f"Sending immediate full batch ({len(alerts_to_send)} alerts) to user {user_id}")
                
                await self.bot.send_message(
                    chat_id=user_id,
                    text=content,
                    parse_mode="HTML"
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è rate limiting
                self._send_times.append(datetime.now())
                
                self.stats['messages_sent'] += 1
                logger.info(f"Immediate batch sent successfully to user {user_id}")
                
            except Exception as e:
                logger.error(f"Error sending immediate batch to {user_id}: {e}")
                self.stats['errors'] += 1
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–ª–µ—Ä—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if "bot was blocked" not in str(e).lower():
                    async with self._lock:
                        self.alert_batches[user_id] = alerts_to_send + self.alert_batches.get(user_id, [])


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å
message_queue = MessageQueue()