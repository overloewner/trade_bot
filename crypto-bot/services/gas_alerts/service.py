import asyncio
import logging
from typing import Dict, Any, List, Tuple, Optional
from datetime import datetime, timedelta
from collections import deque
import aiohttp

from cache.memory import cache
from utils.queue import message_queue, Priority
from utils.rate_limiter import etherscan_limiter
from config.settings import config

logger = logging.getLogger(__name__)


class GasAlertService:
    """–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω—ã –≥–∞–∑–∞ Ethereum"""
    
    def __init__(self):
        self.running = False
        self.monitor_task = None
        
        # –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –≥–∞–∑–∞ (timestamp, price_gwei)
        self.gas_history: deque = deque(maxlen=config.GAS_HISTORY_SIZE)
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–Ω–∞
        self.last_gas_price: Optional[float] = None
        self.last_check_time: Optional[datetime] = None
        
        # –ö–µ—à —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
        self.notified_users: Dict[int, datetime] = {}
        self.notification_cooldown = 3600  # 1 —á–∞—Å –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'checks_performed': 0,
            'alerts_sent': 0,
            'api_errors': 0,
            'last_error': None
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.running:
            return
        
        logger.info("Starting Gas Alert Service...")
        
        self.running = True
        self.monitor_task = asyncio.create_task(self._monitor_loop())
        
        logger.info("Gas Alert Service started")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("Stopping Gas Alert Service...")
        
        self.running = False
        
        if self.monitor_task:
            self.monitor_task.cancel()
            try:
                await self.monitor_task
            except asyncio.CancelledError:
                pass
        
        logger.info("Gas Alert Service stopped")
    
    async def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É –≥–∞–∑–∞
                await self._check_gas_price()
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(config.GAS_CHECK_INTERVAL)
                
            except Exception as e:
                logger.error(f"Error in gas monitor loop: {e}")
                self.stats['last_error'] = str(e)
                await asyncio.sleep(config.GAS_CHECK_INTERVAL)
    
    async def _check_gas_price(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –≥–∞–∑–∞"""
        try:
            # Rate limiting
            await etherscan_limiter.acquire()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≥–∞–∑–∞
            gas_price = await self._fetch_gas_price()
            
            if gas_price is None:
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
            self.gas_history.append({
                'timestamp': datetime.now(),
                'price': gas_price
            })
            
            self.last_gas_price = gas_price
            self.last_check_time = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['checks_performed'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
            await self._check_alerts(gas_price)
            
            logger.debug(f"Gas price: {gas_price} Gwei")
            
        except Exception as e:
            logger.error(f"Error checking gas price: {e}")
            self.stats['api_errors'] += 1
            raise
    
    async def _fetch_gas_price(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≥–∞–∑–∞ —Å Etherscan API"""
        try:
            async with aiohttp.ClientSession() as session:
                params = {
                    'module': 'gastracker',
                    'action': 'gasoracle',
                    'apikey': config.ETHERSCAN_API_KEY
                }
                
                async with session.get(
                    config.ETHERSCAN_API_URL,
                    params=params,
                    timeout=10
                ) as response:
                    if response.status != 200:
                        logger.error(f"Etherscan API error: {response.status}")
                        return None
                    
                    data = await response.json()
                    
                    if data.get('status') != '1':
                        logger.error(f"Etherscan API error: {data.get('message')}")
                        return None
                    
                    # –ë–µ—Ä–µ–º SafeGasPrice
                    result = data.get('result', {})
                    gas_price = float(result.get('SafeGasPrice', 0))
                    
                    return gas_price
                    
        except Exception as e:
            logger.error(f"Error fetching gas price: {e}")
            return None
    
    async def _check_alerts(self, current_price: float):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ä–æ–≥–æ–º >= —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        users_to_alert = await cache.get_gas_alerts_below(current_price)
        
        if not users_to_alert:
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ cooldown
        now = datetime.now()
        alerts_to_send = []
        
        for user_id, threshold in users_to_alert:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
            last_notified = self.notified_users.get(user_id)
            if last_notified and (now - last_notified).seconds < self.notification_cooldown:
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç
            alert_text = (
                f"‚õΩ <b>–ì–∞–∑ –∞–ª–µ—Ä—Ç!</b>\n\n"
                f"–¶–µ–Ω–∞ –≥–∞–∑–∞ –æ–ø—É—Å—Ç–∏–ª–∞—Å—å –Ω–∏–∂–µ –≤–∞—à–µ–≥–æ –ø–æ—Ä–æ–≥–∞:\n"
                f"üìç –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} Gwei\n"
                f"üéØ –í–∞—à –ø–æ—Ä–æ–≥: {threshold} Gwei\n\n"
                f"–°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π!"
            )
            
            alerts_to_send.append((user_id, alert_text))
            self.notified_users[user_id] = now
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã
        if alerts_to_send:
            for user_id, text in alerts_to_send:
                await message_queue.add_message(
                    user_id=user_id,
                    content=text,
                    priority=Priority.HIGH
                )
            
            self.stats['alerts_sent'] += len(alerts_to_send)
            logger.info(f"Sent {len(alerts_to_send)} gas alerts")
    
    def get_gas_history(self, hours: int = 24) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –≥–∞–∑–∞"""
        if not self.gas_history:
            return []
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        cutoff = datetime.now() - timedelta(hours=hours)
        filtered = [
            item for item in self.gas_history
            if item['timestamp'] > cutoff
        ]
        
        return filtered
    
    def get_current_gas_price(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –≥–∞–∑–∞"""
        return self.last_gas_price
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            **self.stats,
            'running': self.running,
            'last_gas_price': self.last_gas_price,
            'last_check_time': self.last_check_time.isoformat() if self.last_check_time else None,
            'history_size': len(self.gas_history),
            'active_alerts': len(cache.gas_alerts) if hasattr(cache, 'gas_alerts') else 0
        }
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        is_healthy = True
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω
        if not self.running:
            is_healthy = False
            issues.append("Service not running")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–≤–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if self.last_check_time:
            age = (datetime.now() - self.last_check_time).seconds
            if age > config.GAS_CHECK_INTERVAL * 2:
                is_healthy = False
                issues.append(f"Last check too old: {age}s ago")
        else:
            is_healthy = False
            issues.append("No checks performed yet")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        error_rate = self.stats['api_errors'] / max(self.stats['checks_performed'], 1)
        if error_rate > 0.5:
            is_healthy = False
            issues.append(f"High error rate: {error_rate:.2%}")
        
        return {
            'healthy': is_healthy,
            'issues': issues,
            'last_check_age': (datetime.now() - self.last_check_time).seconds if self.last_check_time else None,
            'error_rate': error_rate
        }
    
    def clear_notification_cooldown(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ cooldown –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        self.notified_users.pop(user_id, None)


# Singleton instance
gas_alert_service = GasAlertService()