import asyncio
import logging
from typing import Optional, Dict, Any, List, Tuple
from datetime import datetime

from services.etherscan.service import etherscan_service
from cache.memory import cache
from utils.queue import message_queue, Priority
from config.settings import config

logger = logging.getLogger(__name__)


class GasAlertService:
    """–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω—ã –≥–∞–∑–∞ —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è"""
    
    def __init__(self):
        self.running = False
        self.monitor_task = None
        
        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞
        self.current_gas_price: Optional[float] = None
        self.last_check_time: Optional[datetime] = None
        
        # –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
        self.previous_gas_price: Optional[float] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'checks_performed': 0,
            'alerts_sent': 0,
            'api_errors': 0,
            'crossings_detected': 0
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.running:
            return
        
        logger.info("Starting Gas Alert Service...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Etherscan —Å–µ—Ä–≤–∏—Å
        await etherscan_service.initialize()
        
        self.running = True
        self.monitor_task = asyncio.create_task(self._monitor_loop())
        
        logger.info("Gas Alert Service started")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("Stopping Gas Alert Service...")
        
        self.running = False
        
        if self.monitor_task:
            self.monitor_task.cancel()
            try:
                await self.monitor_task
            except asyncio.CancelledError:
                pass
        
        await etherscan_service.close()
        logger.info("Gas Alert Service stopped")
    
    async def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            try:
                await self._check_gas_price()
                await asyncio.sleep(config.GAS_CHECK_INTERVAL)
                
            except Exception as e:
                logger.error(f"Error in gas monitor loop: {e}")
                await asyncio.sleep(config.GAS_CHECK_INTERVAL)
    
    async def _check_gas_price(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –≥–∞–∑–∞ –∏ –ø–æ–∏—Å–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            new_price = await etherscan_service.get_gas_price()
            
            if new_price is None:
                self.stats['api_errors'] += 1
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É
            self.previous_gas_price = self.current_gas_price
            self.current_gas_price = new_price
            self.last_check_time = datetime.now()
            self.stats['checks_performed'] += 1
            
            logger.debug(f"Gas price updated: {new_price} Gwei")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞
            if self.previous_gas_price is not None:
                await self._check_crossings()
            
        except Exception as e:
            logger.error(f"Error checking gas price: {e}")
            self.stats['api_errors'] += 1
    
    async def _check_crossings(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤"""
        if self.current_gas_price is None or self.previous_gas_price is None:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        gas_alerts = await cache.get_all_gas_alerts()
        
        if not gas_alerts:
            return
        
        alerts_to_send = []
        alerts_to_remove = []
        
        for user_id, threshold in gas_alerts:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: —Ü–µ–Ω–∞ "–ø–µ—Ä–µ—à–∞–≥–Ω—É–ª–∞" —á–µ—Ä–µ–∑ –ø–æ—Ä–æ–≥
            crossed = self._price_crossed_threshold(
                self.previous_gas_price,
                self.current_gas_price,
                threshold
            )
            
            if crossed:
                logger.info(f"Gas price crossed threshold for user {user_id}: {threshold} Gwei")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                direction = "üìà" if self.current_gas_price > threshold else "üìâ"
                
                alert_text = (
                    f"{direction} <b>–ì–∞–∑ –∞–ª–µ—Ä—Ç!</b>\n\n"
                    f"–¶–µ–Ω–∞ –≥–∞–∑–∞ –ø–µ—Ä–µ—Å–µ–∫–ª–∞ –≤–∞—à –ø–æ—Ä–æ–≥:\n"
                    f"üéØ –ü–æ—Ä–æ–≥: {threshold} Gwei\n"
                    f"üìç –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {self.current_gas_price} Gwei\n"
                    f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {self.previous_gas_price} ‚Üí {self.current_gas_price} Gwei"
                )
                
                alerts_to_send.append((user_id, alert_text))
                alerts_to_remove.append(user_id)
                
                self.stats['crossings_detected'] += 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã
        if alerts_to_send:
            for user_id, text in alerts_to_send:
                await message_queue.add_message(
                    user_id=user_id,
                    content=text,
                    priority=Priority.HIGH
                )
            
            self.stats['alerts_sent'] += len(alerts_to_send)
            logger.info(f"Sent {len(alerts_to_send)} gas crossing alerts")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏–µ –∞–ª–µ—Ä—Ç—ã
        for user_id in alerts_to_remove:
            await cache.remove_gas_alert(user_id)
            logger.info(f"Removed triggered gas alert for user {user_id}")
    
    def _price_crossed_threshold(self, prev_price: float, curr_price: float, threshold: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —Ü–µ–Ω–æ–π"""
        # –¶–µ–Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–ª–∞ –ø–æ—Ä–æ–≥ –µ—Å–ª–∏:
        # 1. –ë—ã–ª–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞, —Å—Ç–∞–ª–∞ –≤—ã—à–µ: prev < threshold <= curr
        # 2. –ë—ã–ª–∞ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞, —Å—Ç–∞–ª–∞ –Ω–∏–∂–µ: prev > threshold >= curr
        
        crossed_up = prev_price < threshold <= curr_price
        crossed_down = prev_price > threshold >= curr_price
        
        return crossed_up or crossed_down
    
    def get_current_gas_price(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –≥–∞–∑–∞ –∏–∑ –ø–∞–º—è—Ç–∏"""
        return self.current_gas_price
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        etherscan_stats = etherscan_service.get_stats()
        
        return {
            **self.stats,
            'running': self.running,
            'current_gas_price': self.current_gas_price,
            'previous_gas_price': self.previous_gas_price,
            'last_check_time': self.last_check_time.isoformat() if self.last_check_time else None,
            'etherscan_stats': etherscan_stats
        }
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        is_healthy = True
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω
        if not self.running:
            is_healthy = False
            issues.append("Service not running")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–≤–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if self.last_check_time:
            age = (datetime.now() - self.last_check_time).total_seconds()
            if age > config.GAS_CHECK_INTERVAL * 2:
                is_healthy = False
                issues.append(f"Last check too old: {age:.0f}s ago")
        else:
            is_healthy = False
            issues.append("No checks performed yet")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        if self.current_gas_price is None:
            is_healthy = False
            issues.append("No current gas price available")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ API
        if self.stats['checks_performed'] > 0:
            error_rate = self.stats['api_errors'] / self.stats['checks_performed']
            if error_rate > config.MAX_ERROR_RATE:
                is_healthy = False
                issues.append(f"High API error rate: {error_rate:.2%}")
        
        return {
            'healthy': is_healthy,
            'issues': issues,
            'last_check_age': (datetime.now() - self.last_check_time).total_seconds() if self.last_check_time else None
        }


# Singleton instance
gas_alert_service = GasAlertService()