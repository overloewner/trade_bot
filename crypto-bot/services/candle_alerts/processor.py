import asyncio
import logging
from typing import Dict, List, Any, Tuple, Optional
from datetime import datetime

from cache.memory import cache, AlertRecord
from config.settings import config

logger = logging.getLogger(__name__)


class PriceAnalyzer:
    def calculate_change(self, open_price: float, close_price: float) -> float:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 4 –∑–Ω–∞–∫–æ–≤"""
        if open_price == 0:
            return 0.0
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å float
        change = ((close_price - open_price) / open_price) * 100
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 4 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        return round(change, 4)


class CandleProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–µ—á–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        self.analyzer = PriceAnalyzer()
        self.candle_queue = asyncio.Queue(maxsize=config.CANDLE_QUEUE_SIZE)
        self.processing = False
        
        # Cooldown –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        self._cooldown = {}
        self._cooldown_lock = asyncio.Lock()
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∏—Ç–∫–æ–∏–Ω—É –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        self.btc_data = {}  # interval -> {'price': float, 'change': float, 'timestamp': datetime}
        self._btc_lock = asyncio.Lock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'candles_processed': 0,
            'alerts_generated': 0,
            'queue_size': 0
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        if self.processing:
            return
        
        self.processing = True
        logger.info("Starting candle processor...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for i in range(config.WORKER_THREADS):
            asyncio.create_task(self._process_loop(i))
        
        logger.info(f"Started {config.WORKER_THREADS} processing workers")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        logger.info("Stopping candle processor...")
        self.processing = False
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–≤–µ—á–µ–π
        await self.candle_queue.join()
        
        logger.info("Candle processor stopped")
    
    async def add_candle(self, candle: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–µ—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏
            if not candle.get('is_closed', False):
                return
            
            logger.debug(f"Adding closed candle to queue: {candle['symbol']} {candle['interval']}")
            await self.candle_queue.put(candle)
            self.stats['queue_size'] = self.candle_queue.qsize()
            
        except asyncio.QueueFull:
            logger.warning("Candle queue is full, dropping candle")
    
    async def _process_loop(self, worker_id: int):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–µ–π"""
        logger.info(f"Worker {worker_id} started")
        
        while self.processing:
            try:
                # –ñ–¥–µ–º —Å–≤–µ—á—É
                try:
                    candle = await asyncio.wait_for(
                        self.candle_queue.get(),
                        timeout=config.PROCESSOR_TIMEOUT
                    )
                except asyncio.TimeoutError:
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–≤–µ—á—É
                await self._process_candle(candle)
                
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                self.candle_queue.task_done()
                self.stats['candles_processed'] += 1
                
            except Exception as e:
                logger.error(f"Error in worker {worker_id}: {e}")
                await asyncio.sleep(1)
    
    async def _process_candle(self, candle: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π —Å–≤–µ—á–∏"""
        symbol = candle['symbol']
        interval = candle['interval']
        
        logger.debug(f"Processing candle: {symbol} {interval}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
        price_change = self.analyzer.calculate_change(
            candle['open'],
            candle['close']
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏—Ç–∫–æ–∏–Ω–∞ –µ—Å–ª–∏ —ç—Ç–æ BTCUSDT
        if symbol == 'BTCUSDT':
            async with self._btc_lock:
                self.btc_data[interval] = {
                    'price': candle['close'],
                    'change': price_change,
                    'timestamp': datetime.now()
                }
            logger.debug(f"Updated BTC data for {interval}: {price_change:.3f}%")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–µ—à–∞
        subscribed_users = await cache.get_subscribed_users(symbol, interval)
        
        if not subscribed_users:
            logger.debug(f"No subscribers for {symbol} {interval}")
            return
        
        logger.info(f"Found {len(subscribed_users)} subscribers for {symbol} {interval}")
        
        logger.debug(f"{symbol} {interval} price change: {price_change}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
        if not await self._should_send_alert(symbol, interval, price_change):
            logger.debug(f"Alert deduplicated for {symbol} {interval} {price_change}%")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å –±–∏—Ç–∫–æ–∏–Ω–æ–º
        btc_correlation = await self._get_btc_correlation(symbol, interval, price_change)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
        alerts_to_send = []
        
        for user_id, presets in subscribed_users.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Å–µ—Ç—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
            alert_sent = False
            
            for preset in presets:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥
                if abs(price_change) >= preset.percent_change:
                    logger.info(f"Alert triggered for user {user_id}: {symbol} {interval} {price_change:.3f}% >= {preset.percent_change}%")
                    
                    # –§–û–†–ú–ê–¢–ò–†–£–ï–ú –∞–ª–µ—Ä—Ç —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π
                    direction = "üü¢" if price_change > 0 else "üî¥"
                    alert_text = f"{direction} {symbol} {interval}: {abs(price_change):.3f}% (${candle['close']})"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å BTC –µ—Å–ª–∏ –µ—Å—Ç—å
                    if btc_correlation:
                        alert_text += f"\n{btc_correlation}"
                    
                    alerts_to_send.append((user_id, alert_text))
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–ª–µ—Ä—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                    await cache.record_alert(AlertRecord(
                        user_id=user_id,
                        symbol=symbol,
                        interval=interval,
                        timestamp=datetime.now(),
                        percent_change=price_change
                    ))
                    
                    # –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú–°–Ø - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    alert_sent = True
                    break
            
            if not alert_sent:
                logger.debug(f"No alerts triggered for user {user_id}: {abs(price_change):.3f}% below all thresholds")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        if alerts_to_send:
            from utils.queue import message_queue
            await message_queue.add_alerts_bulk(alerts_to_send)
            
            self.stats['alerts_generated'] += len(alerts_to_send)
            logger.info(f"Sent {len(alerts_to_send)} unique alerts for {symbol} {interval}")
        else:
            logger.debug(f"No alerts to send for {symbol} {interval}")
    
    async def _get_btc_correlation(self, symbol: str, interval: str, price_change: float) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –±–∏—Ç–∫–æ–∏–Ω–æ–º"""
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–∞–º –±–∏—Ç–∫–æ–∏–Ω - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
        if symbol == 'BTCUSDT':
            return None
        
        async with self._btc_lock:
            btc_info = self.btc_data.get(interval)
            
            if not btc_info:
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö BTC (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
            if (datetime.now() - btc_info['timestamp']).total_seconds() > 300:
                return None
            
            btc_change = btc_info['change']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
            difference = price_change - btc_change
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è
            if abs(btc_change) < 0.1:  # BTC –ø–æ—á—Ç–∏ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è
                if abs(price_change) > 1.0:
                    return f"üí• BTC: {btc_change:+.3f}% (—Å–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)"
                else:
                    return f"‚û°Ô∏è BTC: {btc_change:+.3f}%"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω–∏—Ü–µ–π
            if difference > 0:
                # –ú–æ–Ω–µ—Ç–∞ —Ä–∞—Å—Ç–µ—Ç —Å–∏–ª—å–Ω–µ–µ BTC –∏–ª–∏ –ø–∞–¥–∞–µ—Ç —Å–ª–∞–±–µ–µ
                return f"üöÄ BTC: {btc_change:+.3f}% (—Ä–∞–∑–Ω–∏—Ü–∞: {difference:+.3f}%)"
            elif difference < -1.0:
                # –ú–æ–Ω–µ—Ç–∞ —Ä–∞—Å—Ç–µ—Ç —Å–ª–∞–±–µ–µ BTC –∏–ª–∏ –ø–∞–¥–∞–µ—Ç —Å–∏–ª—å–Ω–µ–µ
                return f"‚ö†Ô∏è BTC: {btc_change:+.3f}% (—Ä–∞–∑–Ω–∏—Ü–∞: {difference:+.3f}%)"
            else:
                # –î–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ
                return f"üîÑ BTC: {btc_change:+.3f}% (—Ä–∞–∑–Ω–∏—Ü–∞: {difference:+.3f}%)"
    
    async def _should_send_alert(self, symbol: str, interval: str, price_change: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        async with self._cooldown_lock:
            key = (symbol, interval, f"{price_change:.4f}")
            
            if key in self._cooldown:
                return False
            
            self._cooldown[key] = datetime.now()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É cooldown
            asyncio.create_task(self._clear_cooldown(key))
            
            return True
    
    async def _clear_cooldown(self, key):
        """–û—á–∏—Å—Ç–∫–∞ cooldown"""
        await asyncio.sleep(config.ALERT_DEDUP_WINDOW)
        async with self._cooldown_lock:
            self._cooldown.pop(key, None)
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            **self.stats,
            'queue_size': self.candle_queue.qsize(),
            'cooldown_cache_size': len(self._cooldown)
        }
    
    async def health_check(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        return {
            'processing': self.processing,
            'queue_healthy': self.candle_queue.qsize() < config.CANDLE_QUEUE_SIZE * 0.8
        }