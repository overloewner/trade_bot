from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from typing import List, Optional, Dict, Any

from config.settings import config


class Keyboards:
    """–í—Å–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–∞"""
    
    @staticmethod
    def main_menu() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("üìä –°–≤–µ—á–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã", callback_data="candle_alerts"),
                InlineKeyboardButton("‚õΩ –ì–∞–∑ –∞–ª–µ—Ä—Ç—ã", callback_data="gas_alerts")
            ],
            [
                InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def candle_alerts_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é —Å–≤–µ—á–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ—Å–µ—Ç", callback_data="preset_create"),
                InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã", callback_data="preset_list")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def preset_list(presets: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
        """–°–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keyboard = []
        
        for preset in presets:
            status = "‚úÖ" if preset['is_active'] else "‚ùå"
            button_text = f"{status} {preset['name']}"
            keyboard.append([
                InlineKeyboardButton(
                    button_text, 
                    callback_data=f"preset_view_{preset['id']}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="preset_create"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="candle_alerts")
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def preset_actions(preset_id: int, is_active: bool) -> InlineKeyboardMarkup:
        """–î–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–µ—Å–µ—Ç–æ–º"""
        toggle_text = "üî¥ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if is_active else "üü¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
        toggle_action = "deactivate" if is_active else "activate"
        
        keyboard = [
            [
                InlineKeyboardButton(
                    toggle_text, 
                    callback_data=f"preset_{toggle_action}_{preset_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", 
                    callback_data=f"preset_edit_{preset_id}"
                ),
                InlineKeyboardButton(
                    "üóë –£–¥–∞–ª–∏—Ç—å", 
                    callback_data=f"preset_delete_{preset_id}"
                )
            ],
            [
                InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="preset_list")
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def preset_delete_confirm(preset_id: int) -> InlineKeyboardMarkup:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", 
                    callback_data=f"preset_delete_confirm_{preset_id}"
                ),
                InlineKeyboardButton(
                    "‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"preset_view_{preset_id}"
                )
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def pairs_selection_method() -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "üèÜ –¢–æ–ø 100 –ø–æ –æ–±—ä–µ–º—É", 
                    callback_data="pairs_top100"
                )
            ],
            [
                InlineKeyboardButton(
                    "üí∞ –¢–æ–ø –ø–æ –æ–±—ä–µ–º—É 24—á", 
                    callback_data="pairs_volume"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", 
                    callback_data="pairs_manual"
                )
            ],
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="candle_alerts")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def intervals_selection() -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤"""
        keyboard = []
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –¥–≤–∞ —Ä—è–¥–∞
        intervals_row1 = ["1m", "5m", "15m"]
        intervals_row2 = ["30m", "1h", "4h"]
        
        keyboard.append([
            InlineKeyboardButton(
                interval, 
                callback_data=f"interval_toggle_{interval}"
            ) for interval in intervals_row1
        ])
        
        keyboard.append([
            InlineKeyboardButton(
                interval, 
                callback_data=f"interval_toggle_{interval}"
            ) for interval in intervals_row2
        ])
        
        keyboard.append([
            InlineKeyboardButton("‚úÖ –í—Å–µ", callback_data="interval_all"),
            InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å", callback_data="interval_none")
        ])
        
        keyboard.append([
            InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="interval_done"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="candle_alerts")
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def percent_presets() -> InlineKeyboardMarkup:
        """–ü—Ä–µ—Å–µ—Ç—ã –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
        keyboard = [
            [
                InlineKeyboardButton("0.5%", callback_data="percent_0.5"),
                InlineKeyboardButton("1%", callback_data="percent_1"),
                InlineKeyboardButton("2%", callback_data="percent_2")
            ],
            [
                InlineKeyboardButton("3%", callback_data="percent_3"),
                InlineKeyboardButton("5%", callback_data="percent_5"),
                InlineKeyboardButton("10%", callback_data="percent_10")
            ],
            [
                InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="percent_manual")
            ],
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="candle_alerts")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def gas_alerts_menu(has_alert: bool, threshold: Optional[float] = None) -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –≥–∞–∑–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        keyboard = []
        
        if has_alert:
            keyboard.append([
                InlineKeyboardButton(
                    f"‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ({threshold} Gwei)", 
                    callback_data="gas_set"
                )
            ])
            keyboard.append([
                InlineKeyboardButton(
                    "üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å", 
                    callback_data="gas_disable"
                )
            ])
        else:
            keyboard.append([
                InlineKeyboardButton(
                    "üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–ª–µ—Ä—Ç—ã", 
                    callback_data="gas_set"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ –≥–∞–∑–∞", callback_data="gas_chart"),
            InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def gas_threshold_presets() -> InlineKeyboardMarkup:
        """–ü—Ä–µ—Å–µ—Ç—ã –ø–æ—Ä–æ–≥–æ–≤ –≥–∞–∑–∞"""
        keyboard = [
            [
                InlineKeyboardButton("10 Gwei", callback_data="gas_10"),
                InlineKeyboardButton("15 Gwei", callback_data="gas_15"),
                InlineKeyboardButton("20 Gwei", callback_data="gas_20")
            ],
            [
                InlineKeyboardButton("25 Gwei", callback_data="gas_25"),
                InlineKeyboardButton("30 Gwei", callback_data="gas_30"),
                InlineKeyboardButton("50 Gwei", callback_data="gas_50")
            ],
            [
                InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="gas_manual")
            ],
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="gas_alerts")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    @staticmethod
    def back_button(callback_data: str = "main_menu") -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]
        ])
    
    @staticmethod
    def cancel_button(callback_data: str = "main_menu") -> InlineKeyboardMarkup:
        """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=callback_data)]
        ])
    
    @staticmethod
    def confirmation(action: str, data: str) -> InlineKeyboardMarkup:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_{action}_{data}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel_{action}_{data}")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)