from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import List, Dict, Any, Optional
import logging
import re

from services.telegram.keyboards import Keyboards
from models.database import db_manager
from cache.memory import cache, PresetData
from cache.symbols_cache import symbols_cache
from config.settings import config
from utils.queue import message_queue, Priority

logger = logging.getLogger(__name__)


class PresetStates(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞"""
    waiting_for_name = State()
    waiting_for_volume = State()
    waiting_for_manual_pairs = State()
    selecting_interval = State()
    waiting_for_manual_percent = State()


async def preset_create(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–µ—Å–µ—Ç–æ–≤
    user_stats = await cache.get_user_stats(user_id)
    if user_stats['total_presets'] >= config.MAX_PRESETS_PER_USER:
        await callback.answer(
            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {config.MAX_PRESETS_PER_USER} –ø—Ä–µ—Å–µ—Ç–æ–≤",
            show_alert=True
        )
        return
    
    await callback.message.edit_text(
        "<b>üÜï –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞ (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=Keyboards.cancel_button("candle_alerts"),
        parse_mode="HTML"
    )
    
    await state.set_state(PresetStates.waiting_for_name)
async def callback_pairs_selection(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä"""
    await callback.message.edit_text(
        "<b>üìä –í—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä:",
        reply_markup=Keyboards.pairs_selection_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


async def callback_preset_create_back(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏ –ø—Ä–µ—Å–µ—Ç–∞"""
    await state.clear()
    await preset_create(callback, state)


async def process_preset_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞"""
    name = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if len(name) > 30:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=Keyboards.cancel_button("candle_alerts")
        )
        return
    
    if len(name) < 1:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
            reply_markup=Keyboards.cancel_button("candle_alerts")
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(name=name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞—Ä
    await message.answer(
        "<b>üìä –í—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä:",
        reply_markup=Keyboards.pairs_selection_menu(),
        parse_mode="HTML"
    )


async def callback_pairs_volume_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ –æ–±—ä–µ–º—É"""
    await callback.message.edit_text(
        "<b>üí∞ –í—ã–±–æ—Ä –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=Keyboards.pairs_volume_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


async def callback_pairs_specific_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ä"""
    await callback.message.edit_text(
        "<b>üìù –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ä</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=Keyboards.pairs_specific_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


async def preset_pairs_volume(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ –æ–±—ä–µ–º—É - –≤–≤–æ–¥ –æ–±—ä–µ–º–∞"""
    await callback.message.edit_text(
        "<b>üí∞ –í–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000000):",
        reply_markup=Keyboards.cancel_button("candle_alerts"),
        parse_mode="HTML"
    )
    
    await state.set_state(PresetStates.waiting_for_volume)
    await callback.answer()


async def process_volume_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞"""
    try:
        volume = float(message.text.strip().replace(',', ''))
        
        if volume <= 0:
            await message.answer(
                "‚ùå –û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
                reply_markup=Keyboards.cancel_button("candle_alerts")
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ binance API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä —Å –æ–±—ä–µ–º–æ–º
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ø-100 –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
        pairs = symbols_cache.get_top_symbols(100)
        
        if not pairs:
            await message.answer(
                "‚ùå –°–∏–º–≤–æ–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=Keyboards.back_button("candle_alerts")
            )
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –ª–∏–º–∏—Ç—É
        selected_pairs = pairs[:config.MAX_PAIRS_PER_PRESET]
        await state.update_data(pairs=selected_pairs)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
        await show_selected_pairs(message, selected_pairs)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        await show_interval_selection(message, state)
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
            reply_markup=Keyboards.cancel_button("candle_alerts")
        )


async def preset_pairs_top10(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–æ–ø 10 –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É"""
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø 10 –ø–∞—Ä...")
    
    pairs = symbols_cache.get_top_symbols(10)
    
    if not pairs:
        await callback.message.edit_text(
            "‚ùå –°–∏–º–≤–æ–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=Keyboards.back_button("candle_alerts")
        )
        return
    
    await state.update_data(pairs=pairs)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Ç–æ–ø {len(pairs)} –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É:\n" +
        ", ".join(pairs),
        parse_mode="HTML"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    await show_interval_selection(callback.message, state)


async def preset_pairs_top100(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–æ–ø 100 –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É"""
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø 100 –ø–∞—Ä...")
    
    pairs = symbols_cache.get_top_symbols(100)
    
    if not pairs:
        await callback.message.edit_text(
            "‚ùå –°–∏–º–≤–æ–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=Keyboards.back_button("candle_alerts")
        )
        return
    
    await state.update_data(pairs=pairs[:config.MAX_PAIRS_PER_PRESET])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {len(pairs)} –ø–∞—Ä –∏–∑ —Ç–æ–ø-100:\n" +
        ", ".join(pairs[:10]) +
        (f"\n...–∏ –µ—â–µ {len(pairs) - 10}" if len(pairs) > 10 else ""),
        parse_mode="HTML"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    await show_interval_selection(callback.message, state)


async def preset_pairs_manual(callback: types.CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä"""
    await callback.message.edit_text(
        f"<b>‚úèÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–∞—Ä</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª.\n"
        f"–ü—Ä–∏–º–µ—Ä: BTCUSDT, ETHUSDT, BNBUSDT\n\n"
        f"–ú–∞–∫—Å–∏–º—É–º {config.MAX_PAIRS_PER_PRESET} –ø–∞—Ä.",
        reply_markup=Keyboards.cancel_button("candle_alerts"),
        parse_mode="HTML"
    )
    
    await state.set_state(PresetStates.waiting_for_manual_pairs)
    await callback.answer()


async def preset_pairs_top5(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–æ–ø 5 –ø–∞—Ä"""
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–ø 5 –ø–∞—Ä...")
    
    pairs = symbols_cache.get_top_symbols(5)
    
    if not pairs:
        await callback.message.edit_text(
            "‚ùå –°–∏–º–≤–æ–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=Keyboards.back_button("candle_alerts")
        )
        return
    
    await state.update_data(pairs=pairs)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Ç–æ–ø {len(pairs)} –ø–∞—Ä:\n" +
        ", ".join(pairs),
        parse_mode="HTML"
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    await show_interval_selection(callback.message, state)


async def process_manual_pairs(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä"""
    text = message.text.upper().strip()
    
    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä—ã - –∏—â–µ–º –≤—Å–µ —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫—Ä–∏–ø—Ç–æ–ø–∞—Ä—ã
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: –∑–∞–ø—è—Ç–∞—è, –ø—Ä–æ–±–µ–ª, —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π
    raw_pairs = re.split(r'[,\s;]+', text)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
    pairs = []
    invalid_pairs = []
    
    for pair in raw_pairs:
        pair = pair.strip()
        if not pair:
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç - –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ USDT
        if pair.endswith('USDT') and len(pair) > 4:
            pairs.append(pair)
        else:
            invalid_pairs.append(pair)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    pairs = list(set(pairs))
    
    if not pairs:
        error_msg = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π –ø–∞—Ä—ã.\n\n"
        error_msg += "–ü–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ USDT.\n"
        error_msg += "–ü—Ä–∏–º–µ—Ä: BTCUSDT, ETHUSDT\n\n"
        
        if invalid_pairs:
            error_msg += f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä—ã: {', '.join(invalid_pairs[:5])}"
            if len(invalid_pairs) > 5:
                error_msg += f" –∏ –µ—â–µ {len(invalid_pairs) - 5}"
        
        await message.answer(
            error_msg,
            reply_markup=Keyboards.cancel_button("candle_alerts")
        )
        return
    
    if len(pairs) > config.MAX_PAIRS_PER_PRESET:
        pairs = pairs[:config.MAX_PAIRS_PER_PRESET]
        await message.answer(
            f"‚ö†Ô∏è –í–∑—è—Ç–æ –ø–µ—Ä–≤—ã–µ {config.MAX_PAIRS_PER_PRESET} –ø–∞—Ä –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö."
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä—ã –ø—Ä–æ—Ç–∏–≤ –∫–µ—à–∞ —Å–∏–º–≤–æ–ª–æ–≤
    valid_pairs = symbols_cache.validate_symbols(pairs)
    not_found_pairs = [p for p in pairs if p not in valid_pairs]
    
    if not valid_pairs:
        await message.answer(
            "‚ùå –ù–∏ –æ–¥–Ω–∞ –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö.\n\n" +
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è: {', '.join(pairs[:5])}",
            reply_markup=Keyboards.cancel_button("candle_alerts")
        )
        return
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    if not_found_pairs:
        warning_msg = f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏ –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã:\n"
        warning_msg += ", ".join(not_found_pairs[:5])
        if len(not_found_pairs) > 5:
            warning_msg += f" –∏ –µ—â–µ {len(not_found_pairs) - 5}"
        await message.answer(warning_msg)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—ã
    await state.update_data(pairs=valid_pairs)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã
    await show_selected_pairs(message, valid_pairs)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    await show_interval_selection(message, state)


async def show_selected_pairs(message: types.Message, pairs: List[str]):
    """–ü–æ–∫–∞–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä"""
    await message.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ {len(pairs)} –ø–∞—Ä:\n" +
        ", ".join(pairs[:10]) +
        (f"\n...–∏ –µ—â–µ {len(pairs) - 10}" if len(pairs) > 10 else "")
    )


async def show_interval_selection(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    await message.answer(
        "<b>‚è± –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
        reply_markup=Keyboards.interval_selection(),
        parse_mode="HTML"
    )
    
    await state.set_state(PresetStates.selecting_interval)


async def interval_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    interval = callback.data.split("_")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)
    await state.update_data(intervals=[interval])
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    await callback.message.edit_text(
        "<b>üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è</b>\n\n"
        "–ü—Ä–∏ –∫–∞–∫–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ?",
        reply_markup=Keyboards.percent_presets(),
        parse_mode="HTML"
    )
    
    await callback.answer()


async def percent_preset(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤"""
    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ callback_data –≤–∏–¥–∞ "percent_0.5"
    percent_str = callback.data.replace("percent_", "")
    percent = float(percent_str)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
    await state.update_data(percent_change=percent)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç
    await create_preset_final(callback, state)


async def percent_manual(callback: types.CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞"""
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –í–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Ç 0.1 –¥–æ 100):",
        reply_markup=Keyboards.cancel_button("candle_alerts"),
        parse_mode="HTML"
    )
    
    await state.set_state(PresetStates.waiting_for_manual_percent)
    await callback.answer()


async def process_manual_percent(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞"""
    try:
        # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é
        percent_text = message.text.strip().replace(',', '.').replace('%', '')
        percent = float(percent_text)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if percent < 0.1 or percent > 100:
            await message.answer(
                "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 100",
                reply_markup=Keyboards.cancel_button("candle_alerts")
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        await state.update_data(percent_change=percent)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç
        await create_preset_final(message, state)
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n"
            "–ü—Ä–∏–º–µ—Ä: 1.5 –∏–ª–∏ 1,5 –∏–ª–∏ 1.5%",
            reply_markup=Keyboards.cancel_button("candle_alerts")
        )


async def create_preset_final(message_or_callback, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞"""
    data = await state.get_data()
    
    if isinstance(message_or_callback, types.Message):
        user_id = message_or_callback.from_user.id
        reply_func = message_or_callback.answer
    else:
        user_id = message_or_callback.from_user.id
        reply_func = message_or_callback.message.answer
        await message_or_callback.answer()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ—Å–µ—Ç –≤ –ë–î –°–†–ê–ó–£ –ê–ö–¢–ò–í–ù–´–ú  
    preset_id = await db_manager.create_preset(
        user_id=user_id,
        name=data['name'],
        pairs=data['pairs'],
        intervals=data['intervals'],
        percent_change=data['percent_change'],
        is_active=True  # –°—Ä–∞–∑—É –∞–∫—Ç–∏–≤–Ω—ã–π
    )
    
    if not preset_id:
        await reply_func(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ—Å–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=Keyboards.back_button("candle_alerts")
        )
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
    preset = PresetData(
        id=preset_id,
        user_id=user_id,
        name=data['name'],
        pairs=data['pairs'],
        intervals=data['intervals'],
        percent_change=data['percent_change'],
        is_active=True  # –ê–∫—Ç–∏–≤–Ω—ã–π
    )
    await cache.add_preset(preset)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
    await reply_func(
        f"‚úÖ <b>–ü—Ä–µ—Å–µ—Ç —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"üí∞ –ü–∞—Ä: {len(data['pairs'])}\n"
        f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: {data['intervals'][0]}\n"
        f"üìä –ü–æ—Ä–æ–≥: {data['percent_change']}%\n\n"
        f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã.",
        reply_markup=Keyboards.preset_actions(preset_id, True),
        parse_mode="HTML"
    )


async def preset_list(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    presets = await db_manager.get_user_presets(user_id)
    
    if not presets:
        await callback.message.edit_text(
            "<b>üìã –ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ—Å–µ—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!",
            reply_markup=Keyboards.candle_alerts_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"<b>üìã –ú–æ–∏ –ø—Ä–µ—Å–µ—Ç—ã</b>\n\n"
        f"–í—Å–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: {len(presets)}",
        reply_markup=Keyboards.preset_list(presets),
        parse_mode="HTML"
    )
    await callback.answer()


async def preset_view(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ—Å–µ—Ç–∞"""
    preset_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Å–µ—Ç
    preset = await db_manager.get_preset(preset_id)
    
    if not preset:
        await callback.answer("‚ùå –ü—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if preset['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    pairs_preview = ", ".join(preset['pairs'][:5])
    if len(preset['pairs']) > 5:
        pairs_preview += f" –∏ –µ—â–µ {len(preset['pairs']) - 5}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª
    interval = preset['intervals'][0] if preset['intervals'] else "–ù–µ –∑–∞–¥–∞–Ω"
    
    text = (
        f"<b>üìä –ü—Ä–µ—Å–µ—Ç: {preset['name']}</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–ü–∞—Ä: {len(preset['pairs'])}\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval}\n"
        f"–ü–æ—Ä–æ–≥: {preset['percent_change']}%\n\n"
        f"<b>–ü–∞—Ä—ã:</b>\n{pairs_preview}"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=Keyboards.preset_actions(preset_id, preset['is_active']),
        parse_mode="HTML"
    )
    await callback.answer()


async def preset_activate(callback: types.CallbackQuery):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–∞"""
    preset_id = int(callback.data.split("_")[2])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    success = await db_manager.update_preset_status(preset_id, True)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–µ—à–µ
    await cache.update_preset_status(preset_id, True)
    
    await callback.answer("‚úÖ –ü—Ä–µ—Å–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await preset_view(callback)


async def preset_deactivate(callback: types.CallbackQuery):
    """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–∞"""
    preset_id = int(callback.data.split("_")[2])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    success = await db_manager.update_preset_status(preset_id, False)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–µ—à–µ
    await cache.update_preset_status(preset_id, False)
    
    await callback.answer("‚úÖ –ü—Ä–µ—Å–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await preset_view(callback)


async def preset_delete(callback: types.CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞"""
    preset_id = int(callback.data.split("_")[2])
    
    await callback.message.edit_text(
        "‚ùì <b>–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ—Å–µ—Ç?</b>\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=Keyboards.preset_delete_confirm(preset_id),
        parse_mode="HTML"
    )
    await callback.answer()


async def preset_delete_confirm(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞"""
    preset_id = int(callback.data.split("_")[3])
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    success = await db_manager.delete_preset(preset_id)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞
    await cache.remove_preset(preset_id)
    
    await callback.answer("‚úÖ –ü—Ä–µ—Å–µ—Ç —É–¥–∞–ª–µ–Ω")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
    await preset_list(callback)


def register_candle_alerts_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–≤–µ—á–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
    dp.callback_query.register(preset_create, F.data == "preset_create")
    dp.message.register(process_preset_name, PresetStates.waiting_for_name)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
    dp.callback_query.register(callback_pairs_volume_menu, F.data == "pairs_volume_menu")
    dp.callback_query.register(callback_pairs_specific_menu, F.data == "pairs_specific_menu")
    dp.callback_query.register(callback_pairs_selection, F.data == "pairs_selection")
    dp.callback_query.register(callback_preset_create_back, F.data == "preset_create_back")
    
    # –í—ã–±–æ—Ä –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É
    dp.callback_query.register(preset_pairs_volume, F.data == "pairs_volume")
    dp.message.register(process_volume_input, PresetStates.waiting_for_volume)
    dp.callback_query.register(preset_pairs_top10, F.data == "pairs_top10")
    dp.callback_query.register(preset_pairs_top100, F.data == "pairs_top100")
    
    # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∞—Ä
    dp.callback_query.register(preset_pairs_manual, F.data == "pairs_manual")
    dp.callback_query.register(preset_pairs_top5, F.data == "pairs_top5")
    dp.message.register(process_manual_pairs, PresetStates.waiting_for_manual_pairs)
    
    # –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    dp.callback_query.register(interval_selected, F.data.startswith("interval_") & ~F.data.contains("done") & ~F.data.contains("all") & ~F.data.contains("none"))
    
    # –í—ã–±–æ—Ä –ø—Ä–æ—Ü–µ–Ω—Ç–∞
    dp.callback_query.register(percent_preset, F.data.startswith("percent_") & ~F.data.contains("manual"))
    dp.callback_query.register(percent_manual, F.data == "percent_manual")
    dp.message.register(process_manual_percent, PresetStates.waiting_for_manual_percent)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞–º–∏
    dp.callback_query.register(preset_list, F.data == "preset_list")
    dp.callback_query.register(preset_view, F.data.startswith("preset_view_"))
    dp.callback_query.register(preset_activate, F.data.startswith("preset_activate_"))
    dp.callback_query.register(preset_deactivate, F.data.startswith("preset_deactivate_"))
    dp.callback_query.register(preset_delete, F.data.startswith("preset_delete_") & ~F.data.contains("confirm"))
    dp.callback_query.register(preset_delete_confirm, F.data.startswith("preset_delete_confirm_"))