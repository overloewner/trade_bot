from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from datetime import datetime, timedelta
import io
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from collections import deque

from services.telegram.keyboards import Keyboards
from models.database import db_manager
from cache.memory import cache
from config.settings import config

logger = logging.getLogger(__name__)


class GasStates(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤"""
    waiting_for_threshold = State()


async def gas_set(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–∞–∑ –∞–ª–µ—Ä—Ç–∞"""
    await callback.message.edit_text(
        "<b>‚õΩ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –≥–∞–∑–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã –≥–∞–∑–∞ –≤ Gwei.\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.",
        reply_markup=Keyboards.gas_threshold_presets(),
        parse_mode="HTML"
    )
    await callback.answer()


async def gas_preset(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ—Ä–æ–≥–∞ –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤"""
    threshold = float(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    success = await db_manager.set_gas_alert(user_id, threshold)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    await cache.set_gas_alert(user_id, threshold)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ì–∞–∑ –∞–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"–ü–æ—Ä–æ–≥: {threshold} Gwei\n"
        f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –≥–∞–∑–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.",
        reply_markup=Keyboards.gas_alerts_menu(True, threshold),
        parse_mode="HTML"
    )
    await callback.answer()


async def gas_manual(callback: types.CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ—Ä–æ–≥–∞"""
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –í–≤–æ–¥ –ø–æ—Ä–æ–≥–∞ –≥–∞–∑–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –≤ Gwei (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.5):",
        reply_markup=Keyboards.cancel_button("gas_alerts"),
        parse_mode="HTML"
    )
    
    await state.set_state(GasStates.waiting_for_threshold)
    await callback.answer()


async def process_manual_threshold(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞"""
    try:
        threshold = float(message.text.strip().replace(',', '.'))
        
        if threshold <= 0 or threshold > 1000:
            await message.answer(
                "‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.1 –¥–æ 1000 Gwei",
                reply_markup=Keyboards.cancel_button("gas_alerts")
            )
            return
        
        user_id = message.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        success = await db_manager.set_gas_alert(user_id, threshold)
        
        if not success:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=Keyboards.back_button("gas_alerts")
            )
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        await cache.set_gas_alert(user_id, threshold)
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ <b>–ì–∞–∑ –∞–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"–ü–æ—Ä–æ–≥: {threshold} Gwei\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –≥–∞–∑–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.",
            reply_markup=Keyboards.gas_alerts_menu(True, threshold),
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
            reply_markup=Keyboards.cancel_button("gas_alerts")
        )


async def gas_disable(callback: types.CallbackQuery):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–∞–∑ –∞–ª–µ—Ä—Ç–∞"""
    user_id = callback.from_user.id
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –≤ –ë–î
    success = await db_manager.disable_gas_alert(user_id)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞
    await cache.remove_gas_alert(user_id)
    
    await callback.message.edit_text(
        "‚úÖ <b>–ì–∞–∑ –∞–ª–µ—Ä—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n"
        "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–µ –≥–∞–∑–∞.",
        reply_markup=Keyboards.gas_alerts_menu(False),
        parse_mode="HTML"
    )
    await callback.answer()


async def gas_chart(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –≥–∞–∑–∞"""
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥–∞–∑–∞ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
        gas_history = get_gas_history()  # –ó–∞–≥–ª—É—à–∫–∞
        
        if not gas_history:
            await callback.message.answer(
                "üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –≥–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "–î–∞–Ω–Ω—ã–µ –Ω–∞—á–Ω—É—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart_buffer = create_gas_chart(gas_history)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await callback.message.answer_photo(
            photo=chart_buffer,
            caption="üìä <b>–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –≥–∞–∑–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</b>",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error creating gas chart: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def create_gas_chart(gas_history: list) -> io.BytesIO:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã –≥–∞–∑–∞"""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    timestamps = [item['timestamp'] for item in gas_history]
    prices = [item['price'] for item in gas_history]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(10, 6))
    plt.style.use('dark_background')
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
    plt.plot(timestamps, prices, color='#00ff88', linewidth=2)
    
    # –ó–∞–ª–∏–≤–∫–∞ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
    plt.fill_between(timestamps, prices, alpha=0.3, color='#00ff88')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
    plt.xlabel('–í—Ä–µ–º—è', fontsize=12)
    plt.ylabel('–¶–µ–Ω–∞ –≥–∞–∑–∞ (Gwei)', fontsize=12)
    plt.title('–¶–µ–Ω–∞ –≥–∞–∑–∞ Ethereum –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞', fontsize=14, pad=20)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    ax = plt.gca()
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
    ax.xaxis.set_major_locator(mdates.HourLocator(interval=4))
    plt.gcf().autofmt_xdate()
    
    # –°–µ—Ç–∫–∞
    plt.grid(True, alpha=0.2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    current_price = prices[-1]
    plt.text(0.02, 0.95, f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.1f} Gwei',
             transform=ax.transAxes, fontsize=12,
             bbox=dict(boxstyle='round', facecolor='#00ff88', alpha=0.2))
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    buffer = io.BytesIO()
    plt.tight_layout()
    plt.savefig(buffer, format='png', dpi=100, facecolor='#1a1a1a')
    buffer.seek(0)
    plt.close()
    
    return buffer


def get_gas_history() -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≥–∞–∑–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ gas_service
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    return []


def register_gas_alerts_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞
    dp.callback_query.register(gas_set, F.data == "gas_set")
    dp.callback_query.register(gas_preset, F.data.startswith("gas_") & F.data.split("_")[1].isdigit())
    dp.callback_query.register(gas_manual, F.data == "gas_manual")
    dp.message.register(process_manual_threshold, GasStates.waiting_for_threshold)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–º
    dp.callback_query.register(gas_disable, F.data == "gas_disable")
    dp.callback_query.register(gas_chart, F.data == "gas_chart")