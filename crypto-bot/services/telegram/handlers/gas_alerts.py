from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from services.telegram.keyboards import Keyboards
from models.database import db_manager
from cache.memory import cache
from services.gas_alerts.service import gas_alert_service
from config.settings import config

logger = logging.getLogger(__name__)


class GasStates(StatesGroup):
    """FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤"""
    waiting_for_threshold = State()


async def gas_set(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–∞–∑ –ø—Ä–µ—Å–µ—Ç–∞"""
    await callback.message.edit_text(
        "<b>‚õΩ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –≥–∞–∑–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã –≥–∞–∑–∞ –≤ Gwei.\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ—Ç —ç—Ç–æ—Ç –ø–æ—Ä–æ–≥.",
        reply_markup=Keyboards.gas_threshold_presets(),
        parse_mode="HTML"
    )
    await callback.answer()


async def gas_preset(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ—Ä–æ–≥–∞ –∏–∑ –ø—Ä–µ—Å–µ—Ç–æ–≤"""
    threshold = float(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    success = await db_manager.set_gas_alert(user_id, threshold)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    await cache.set_gas_alert(user_id, threshold)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ—Ä–≤–∏—Å
    await gas_alert_service.add_preset(user_id, threshold)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ì–∞–∑ –ø—Ä–µ—Å–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"–ü–æ—Ä–æ–≥: {threshold} Gwei\n"
        f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –≥–∞–∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ—Ç —ç—Ç–æ—Ç –ø–æ—Ä–æ–≥.",
        reply_markup=Keyboards.gas_alerts_menu(True, threshold),
        parse_mode="HTML"
    )
    await callback.answer()


async def gas_manual(callback: types.CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ—Ä–æ–≥–∞"""
    await callback.message.edit_text(
        "<b>‚úèÔ∏è –í–≤–æ–¥ –ø–æ—Ä–æ–≥–∞ –≥–∞–∑–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –≤ Gwei (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.5):",
        reply_markup=Keyboards.cancel_button("gas_alerts"),
        parse_mode="HTML"
    )
    
    await state.set_state(GasStates.waiting_for_threshold)
    await callback.answer()


async def process_manual_threshold(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞"""
    try:
        threshold = float(message.text.strip().replace(',', '.'))
        
        if threshold < config.GAS_MIN_THRESHOLD or threshold > config.GAS_MAX_THRESHOLD:
            await message.answer(
                f"‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç {config.GAS_MIN_THRESHOLD} –¥–æ {config.GAS_MAX_THRESHOLD} Gwei",
                reply_markup=Keyboards.cancel_button("gas_alerts")
            )
            return
        
        user_id = message.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        success = await db_manager.set_gas_alert(user_id, threshold)
        
        if not success:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=Keyboards.back_button("gas_alerts")
            )
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        await cache.set_gas_alert(user_id, threshold)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–µ—Ä–≤–∏—Å
        await gas_alert_service.add_preset(user_id, threshold)
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ <b>–ì–∞–∑ –ø—Ä–µ—Å–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"–ü–æ—Ä–æ–≥: {threshold} Gwei\n"
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –≥–∞–∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ—Ç —ç—Ç–æ—Ç –ø–æ—Ä–æ–≥.",
            reply_markup=Keyboards.gas_alerts_menu(True, threshold),
            parse_mode="HTML"
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
            reply_markup=Keyboards.cancel_button("gas_alerts")
        )


async def gas_disable(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥–∞–∑ –ø—Ä–µ—Å–µ—Ç–∞"""
    user_id = callback.from_user.id
    
    # –£–î–ê–õ–Ø–ï–ú –∏–∑ –ë–î –ø–æ–ª–Ω–æ—Å—Ç—å—é
    success = await db_manager.delete_gas_alert(user_id)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–µ—à–∞
    await cache.remove_gas_alert(user_id)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
    await gas_alert_service.remove_preset(user_id)
    
    await callback.message.edit_text(
        "‚úÖ <b>–ì–∞–∑ –ø—Ä–µ—Å–µ—Ç —É–¥–∞–ª–µ–Ω</b>\n\n"
        "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–µ –≥–∞–∑–∞.",
        reply_markup=Keyboards.gas_alerts_menu(False),
        parse_mode="HTML"
    )
    await callback.answer()


async def gas_chart(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–∞–∑–µ"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ (–∏–∑ –ø–∞–º—è—Ç–∏)
    current_price = gas_alert_service.get_current_gas_price()
    
    if current_price is None:
        await callback.message.answer(
            "üìä –¶–µ–Ω–∞ –≥–∞–∑–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
            "–î–∞–Ω–Ω—ã–µ –Ω–∞—á–Ω—É—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    await callback.message.answer(
        f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∞–∑–µ Ethereum</b>\n\n"
        f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} Gwei\n"
        f"üïê –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ {config.GAS_CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥",
        parse_mode="HTML"
    )


def register_gas_alerts_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Å–µ—Ç–∞
    dp.callback_query.register(gas_set, F.data == "gas_set")
    dp.callback_query.register(gas_preset, F.data.startswith("gas_") & F.data.split("_")[1].replace(".", "").isdigit())
    dp.callback_query.register(gas_manual, F.data == "gas_manual")
    dp.message.register(process_manual_threshold, GasStates.waiting_for_threshold)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–º
    dp.callback_query.register(gas_disable, F.data == "gas_disable")
    dp.callback_query.register(gas_chart, F.data == "gas_chart")