from aiogram import types, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
import logging

from services.telegram.keyboards import Keyboards
from models.database import db_manager
from cache.memory import cache
from utils.queue import message_queue, Priority

logger = logging.getLogger(__name__)


async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await cache.clear_user_state(user_id)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    await db_manager.create_user(user_id)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìä <b>–°–≤–µ—á–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã</b> - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã\n"
        "‚õΩ <b>–ì–∞–∑ –∞–ª–µ—Ä—Ç—ã</b> - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≥–∞–∑–∞ –≤ Ethereum\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=Keyboards.main_menu(),
        parse_mode="HTML"
    )


async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "<b>üìö –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–°–≤–µ—á–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–µ—Å–µ—Ç—ã —Å –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–µ—Å–µ—Ç—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {config.MAX_PRESETS_PER_USER} –ø—Ä–µ—Å–µ—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        
        "<b>–ì–∞–∑ –∞–ª–µ—Ä—Ç—ã:</b>\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã –≥–∞–∑–∞ –≤ Gwei\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –≥–∞–∑ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞\n\n"
        
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/status - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/preset - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞–º–∏\n"
        "/gas - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤\n\n"
        
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @your_support_contact"
    )
    
    await message.answer(
        help_text,
        reply_markup=Keyboards.back_button(),
        parse_mode="HTML"
    )


async def cmd_status(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = await cache.get_user_stats(user_id)
    
    status_text = (
        "<b>üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üìä –ü—Ä–µ—Å–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {stats['total_presets']}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤: {stats['active_presets']}\n"
        f"‚õΩ –ì–∞–∑ –∞–ª–µ—Ä—Ç: {'–í–∫–ª—é—á–µ–Ω' if stats['has_gas_alert'] else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
    )
    
    if stats['has_gas_alert'] and stats['gas_threshold']:
        status_text += f"‚îî –ü–æ—Ä–æ–≥: {stats['gas_threshold']} Gwei\n"
    
    await message.answer(
        status_text,
        reply_markup=Keyboards.back_button(),
        parse_mode="HTML"
    )


async def cmd_preset(message: types.Message):
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ—Å–µ—Ç–∞–º"""
    await show_candle_alerts_menu(message)


async def cmd_gas(message: types.Message):
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–∞–∑ –∞–ª–µ—Ä—Ç–∞–º"""
    await show_gas_alerts_menu(message)


async def callback_main_menu(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = (
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    )
    
    await callback.message.edit_text(
        welcome_text,
        reply_markup=Keyboards.main_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


async def callback_help(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ callback"""
    help_text = (
        "<b>üìö –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–°–≤–µ—á–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–µ—Å–µ—Ç—ã —Å –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–µ—Å–µ—Ç—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º {config.MAX_PRESETS_PER_USER} –ø—Ä–µ—Å–µ—Ç–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        
        "<b>–ì–∞–∑ –∞–ª–µ—Ä—Ç—ã:</b>\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã –≥–∞–∑–∞ –≤ Gwei\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –≥–∞–∑ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞\n\n"
        
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @your_support_contact"
    )
    
    await callback.message.edit_text(
        help_text,
        reply_markup=Keyboards.back_button(),
        parse_mode="HTML"
    )
    await callback.answer()


async def callback_stats(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ callback"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = await cache.get_user_stats(user_id)
    
    status_text = (
        "<b>üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üìä –ü—Ä–µ—Å–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {stats['total_presets']}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤: {stats['active_presets']}\n"
        f"‚õΩ –ì–∞–∑ –∞–ª–µ—Ä—Ç: {'–í–∫–ª—é—á–µ–Ω' if stats['has_gas_alert'] else '–í—ã–∫–ª—é—á–µ–Ω'}\n"
    )
    
    if stats['has_gas_alert'] and stats['gas_threshold']:
        status_text += f"‚îî –ü–æ—Ä–æ–≥: {stats['gas_threshold']} Gwei\n"
    
    await callback.message.edit_text(
        status_text,
        reply_markup=Keyboards.back_button(),
        parse_mode="HTML"
    )
    await callback.answer()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
async def show_candle_alerts_menu(message_or_callback):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Å–≤–µ—á–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    text = (
        "<b>üìä –°–≤–µ—á–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã</b>\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(
            text,
            reply_markup=Keyboards.candle_alerts_menu(),
            parse_mode="HTML"
        )
    else:
        await message_or_callback.message.edit_text(
            text,
            reply_markup=Keyboards.candle_alerts_menu(),
            parse_mode="HTML"
        )
        await message_or_callback.answer()


async def show_gas_alerts_menu(message_or_callback):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –≥–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤"""
    if isinstance(message_or_callback, types.Message):
        user_id = message_or_callback.from_user.id
    else:
        user_id = message_or_callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–∞–∑ –∞–ª–µ—Ä—Ç–µ
    gas_alert = await db_manager.get_gas_alert(user_id)
    has_alert = gas_alert is not None and gas_alert.get('is_active', False)
    threshold = gas_alert.get('threshold_gwei') if gas_alert else None
    
    text = (
        "<b>‚õΩ –ì–∞–∑ –∞–ª–µ—Ä—Ç—ã</b>\n\n"
        "–ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –≥–∞–∑–∞ –≤ Ethereum "
        "–æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.\n\n"
    )
    
    if has_alert:
        text += f"‚úÖ –ê–ª–µ—Ä—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã\nüìç –ü–æ—Ä–æ–≥: {threshold} Gwei"
    else:
        text += "‚ùå –ê–ª–µ—Ä—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã"
    
    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(
            text,
            reply_markup=Keyboards.gas_alerts_menu(has_alert, threshold),
            parse_mode="HTML"
        )
    else:
        await message_or_callback.message.edit_text(
            text,
            reply_markup=Keyboards.gas_alerts_menu(has_alert, threshold),
            parse_mode="HTML"
        )
        await message_or_callback.answer()


def register_start_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å—Ç–∞—Ä—Ç–∞"""
    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_status, Command("status"))
    dp.message.register(cmd_preset, Command("preset"))
    dp.message.register(cmd_gas, Command("gas"))
    
    # Callback-–∏
    dp.callback_query.register(callback_main_menu, lambda c: c.data == "main_menu")
    dp.callback_query.register(callback_help, lambda c: c.data == "help")
    dp.callback_query.register(callback_stats, lambda c: c.data == "stats")
    dp.callback_query.register(
        lambda c: show_candle_alerts_menu(c), 
        lambda c: c.data == "candle_alerts"
    )
    dp.callback_query.register(
        lambda c: show_gas_alerts_menu(c), 
        lambda c: c.data == "gas_alerts"
    )


# –ò–º–ø–æ—Ä—Ç config –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
from config.settings import config