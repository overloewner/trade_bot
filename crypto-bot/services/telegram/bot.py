import asyncio
import logging
from typing import List, Dict, Any
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config.settings import config
from services.telegram.handlers import register_all_handlers
from services.telegram.alert_types import AlertType, AlertRequest, CandleAlertData, GasCrossingAlertData
from utils.queue import message_queue, Priority
from cache.memory import cache
from models.database import db_manager

logger = logging.getLogger(__name__)


class AlertFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    @staticmethod
    def format_candle_alert(data: CandleAlertData) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        direction_icon = "üü¢" if data.direction == "up" else "üî¥"
        return f"{direction_icon} {data.symbol} {data.interval}: {abs(data.percent_change):.2f}% (${data.price})"
    
    @staticmethod
    def format_gas_crossing_alert(data: GasCrossingAlertData) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≥–∞–∑–∞"""
        direction_icon = "üìà" if data.direction == "up" else "üìâ"
        return (
            f"{direction_icon} <b>–ì–∞–∑ –∞–ª–µ—Ä—Ç!</b>\n\n"
            f"–¶–µ–Ω–∞ –≥–∞–∑–∞ –ø–µ—Ä–µ—Å–µ–∫–ª–∞ –≤–∞—à –ø–æ—Ä–æ–≥:\n"
            f"üéØ –ü–æ—Ä–æ–≥: {data.threshold} Gwei\n"
            f"üìç –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {data.current_price} Gwei\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {data.previous_price} ‚Üí {data.current_price} Gwei"
        )


class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.bot = Bot(
            token=config.BOT_TOKEN,
            default=DefaultBotProperties(
                parse_mode=ParseMode.HTML
            )
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
        message_queue.set_bot(self.bot)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_all_handlers(self.dp)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –∞–ª–µ—Ä—Ç–æ–≤
        self.formatter = AlertFormatter()
        
        self.running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Telegram bot...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
            await db_manager.init()
            logger.info("Database initialized")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à
            await cache.load_from_db(db_manager)
            logger.info("Cache loaded from database")
            
            # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            await message_queue.start_processing()
            logger.info("Message queue processing started")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
            bot_info = await self.bot.get_me()
            logger.info(f"Bot started: @{bot_info.username}")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
            await self.set_bot_commands()
            
            self.running = True
            
            # –ó–∞–ø—É—Å–∫ polling
            await self.dp.start_polling(
                self.bot,
                allowed_updates=["message", "callback_query"]
            )
            
        except Exception as e:
            logger.error(f"Error starting bot: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("Stopping Telegram bot...")
        
        self.running = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
        await message_queue.stop_processing()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ë–î
        await db_manager.close()
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞
        await self.bot.session.close()
        
        logger.info("Telegram bot stopped")
    
    async def set_bot_commands(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
        from aiogram.types import BotCommand
        
        commands = [
            BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
            BotCommand(command="status", description="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand(command="preset", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞–º–∏"),
            BotCommand(command="gas", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–∞–∑ –∞–ª–µ—Ä—Ç–æ–≤")
        ]
        
        await self.bot.set_my_commands(commands)
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ê–õ–ï–†–¢–û–í ===
    
    async def send_alerts_bulk(self, alerts: List[AlertRequest]) -> None:
        """–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        logger.info(f"Processing {len(alerts)} alerts for sending")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ —Ç–∏–ø–∞–º
        user_alerts: Dict[int, List[str]] = {}
        
        for alert in alerts:
            user_id = alert.user_id
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if alert.alert_type == AlertType.CANDLE:
                formatted_text = self.formatter.format_candle_alert(alert.data)
            elif alert.alert_type == AlertType.GAS_CROSSING:
                formatted_text = self.formatter.format_gas_crossing_alert(alert.data)
            else:
                logger.error(f"Unknown alert type: {alert.alert_type}")
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if user_id not in user_alerts:
                user_alerts[user_id] = []
            user_alerts[user_id].append(formatted_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        for user_id, alert_texts in user_alerts.items():
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            priority = self._convert_priority(alerts[0].priority)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
            await message_queue.add_formatted_alerts(user_id, alert_texts, priority)
    
    async def send_gas_alert(self, user_id: int, data: GasCrossingAlertData) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–∞–∑–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        alert = AlertRequest(
            user_id=user_id,
            alert_type=AlertType.GAS_CROSSING,
            data=data,
            priority="high"
        )
        await self.send_alerts_bulk([alert])
    
    async def send_message(self, user_id: int, text: str, priority: str = "normal", **kwargs) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        msg_priority = self._convert_priority(priority)
        await message_queue.add_message(
            user_id=user_id,
            content=text,
            priority=msg_priority,
            **kwargs
        )
    
    def _convert_priority(self, priority_str: str) -> Priority:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ enum"""
        priority_map = {
            "low": Priority.LOW,
            "normal": Priority.NORMAL,
            "high": Priority.HIGH,
            "urgent": Priority.URGENT
        }
        return priority_map.get(priority_str, Priority.NORMAL)
    
    # === –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===
    
    async def send_alert(self, user_id: int, text: str, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        await self.send_message(user_id, text, priority="high", **kwargs)
    
    async def broadcast_message(self, user_ids: list[int], text: str, **kwargs):
        """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        success_count = 0
        fail_count = 0
        
        for user_id in user_ids:
            try:
                await self.send_message(user_id, text, **kwargs)
                success_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
                await asyncio.sleep(0.01)
                
            except Exception as e:
                logger.error(f"Error broadcasting to {user_id}: {e}")
                fail_count += 1
        
        logger.info(f"Broadcast completed: {success_count} success, {fail_count} failed")
        return success_count, fail_count


# Singleton instance
telegram_bot = TelegramBot()